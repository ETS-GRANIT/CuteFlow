attributes(global) subroutine source_cudaf(vdlg_d,surf_d,zm_d,gradz_d)
!
! ======================================================================
!
!     source = calcul du terme source sur kvol    
!     source = calculation of the source term on kvol
!
!     auteur : Youssef Loukili  GRANIT ETSMTL
!
!     version : 1.0  ;  May 12 2003
! ======================================================================
!
!     parametres =
!       grd         :
!       kvol        :
!       haut        :
!       vitu        :
!       vitv        :
!       normvit     :
!       chezy       :
!       gradz       :
!       greta       :
!       sourdhcarre :
!       sourc       :
!
! ======================================================================
!
    ! use global
    ! use m_param
!
    use precision_m
    use global_device
    implicit none

! ... debut de l interface .............................................
!
! ... fin de l interface ...............................................
! 
! ... variables passees en parametre ...................................
!
    real(fp_kind), dimension(:,:), intent(in)    :: vdlg_d
    real(fp_kind), dimension(:), intent(in)      :: surf_d, zm_d
    real(fp_kind), dimension(:,:), intent(in)    :: gradz_d


!
! ... variables locales ................................................
!
    real(fp_kind)                         :: chezy2, vitu, vitv, normvit, area, tempq, tempa
    real(fp_kind)                         :: manning, dtgn2, dtgn2h, detaf, q1, q2, q3, normQ, beta
    real(fp_kind), dimension(3,3)         :: af

    integer :: ti,gi
   
    ti = threadIdx%x
    gi = (blockIdx%x - 1)*blockDim%x + ti
!   
! ... debut du traitement
!

    !!if (gi <= nelt_d) then
    if (gi <= nelt_d-nelt_fant_recep_d) then
        sourcfric_d(gi,:) = 0.d0
        q1 = vdlg_d(gi,1)
        q2 = vdlg_d(gi,2)
        q3 = vdlg_d(gi,3)
        area = surf_d(gi)
        normQ   = sqrt( q2**2 + q3**2 )
        manning = manning_nelt_d(gi)
    !
    !       ++++++++++++++  SLOPE  +++++++++++++++
    !
    !
    !
    !
    !       ++++++++++++++  FRICTION  +++++++++++++++
    !
    !
        if (friction_d == 1) then
    !
           if (  q1 <= tolisec_d ) then
	!		if (  q1 <= tol_d ) then              
    !
                sourcfric_d(gi, 2) = 0.d0
                sourcfric_d(gi, 3) = 0.d0
            else                                                
                vitu = q2 / q1
                vitv = q3 / q1
    !
                chezy2  = q1**(1.d0/3.d0) / manning**2
                normvit = sqrt( vitu**2 + vitv**2 )
    !
                if ( normvit < tol_d ) then
                    normvit= tol_d
                endif
                
                ! tempq = real(q1**(-1.d0/3.d0))
                ! sourcfric_d(gi, 2) = - gp_d * manning*manning * vitu * normvit * area*tempq
                ! sourcfric_d(gi, 3) = - gp_d * manning*manning * vitv * normvit * area*tempq
            
                sourcfric_d(gi, 2) = - gp_d * manning*manning * vitu * normvit * area*q1**(-1.d0/3.d0)
                sourcfric_d(gi, 3) = - gp_d * manning*manning * vitv * normvit * area*q1**(-1.d0/3.d0)
            endif
    !
    !       ++++++++++++++  IMPLICITATION  +++++++++++++++
    !
            if ( fricimplic_d == 1 ) then 
    !
               if ( normvit > tol_d .and. q1 > tolisec_d ) then
	!			if ( normvit > tol_d .and. q1 > tol_d ) then
    !
                    ! tempa  = real(q1**(-4.d0/3.d0))
                    ! dtgn2h = dt_d / 2.d0 * gp_d * manning*manning*tempa
    !
                    dtgn2h = dt_d / 2.d0 * gp_d * manning*manning*q1**(-4.d0/3.d0)

                    af(1,1) = 1.d0
                    af(1,2) = 0.d0
                    af(1,3) = 0.d0
                    af(2,1) = - 7.d0/3.d0*dtgn2h * vitu * normvit
                    af(2,2) = 1.d0 + dtgn2h * ( 2*vitu**2 + vitv**2 ) / normvit
                    af(2,3) = dtgn2h * vitu * vitv / normvit
                    af(3,1) = - 7.d0/3.d0*dtgn2h * vitv * normvit
                    af(3,2) = af(2,3)
                    af(3,3) = 1.d0 + dtgn2h * ( vitu**2 + 2*vitv**2 ) / normvit
    !
                    detaf = af(2,2)*af(3,3)-af(2,3)*af(3,2)
    !
                    afm1_d(gi,1) = 1
                    afm1_d(gi,2) = 0.d0
                    afm1_d(gi,3) = 0.d0
                    afm1_d(gi,4) = -(af(2,1)*af(3,3) - af(2,3)*af(3,1))/detaf 
                    afm1_d(gi,5) = af(3,3)/detaf
                    afm1_d(gi,6) = -af(2,3)/detaf 
                    afm1_d(gi,7) =  (af(2,1)*af(3,2) - af(2,2)*af(3,1))/detaf
                    afm1_d(gi,8) = -af(3,2)/detaf
                    afm1_d(gi,9) = af(2,2)/detaf
    !
                else
                    afm1_d(gi,1) = 1.d0
                    afm1_d(gi,2) = 0.d0
                    afm1_d(gi,3) = 0.d0
                    afm1_d(gi,4) = 0.d0
                    afm1_d(gi,5) = 1.d0
                    afm1_d(gi,6) = 0.d0
                    afm1_d(gi,7) = 0.d0
                    afm1_d(gi,8) = 0.d0
                    afm1_d(gi,9) = 1.d0
                endif
    !
            elseif ( fricimplic_d == 2 ) then
    !           
               if ( normvit > tol_d .and. q1 > tolisec_d ) then
	!			if ( normvit > tol_d .and. q1 > tol_d ) then
    !
                    ! tempa  = real(q1**(-4.d0/3.d0))
                    ! beta = - dt_d* gp_d * manning*manning * normvit * tempa

                    beta = - dt_d* gp_d * manning*manning * normvit * q1**(-4.d0/3.d0)
    !
                    af(1,1) = 1.d0
                    af(1,2) = 0.d0
                    af(1,3) = 0.d0
                    af(2,1) = 0.d0
                    af(2,2) = 1.d0 - beta
                    af(2,3) = 0.d0
                    af(3,1) = 0.d0
                    af(3,2) = 0.d0
                    af(3,3) = 1.d0 - beta
    !
                    detaf = beta -1
    !
                    afm1_d(gi,1) = 1.d0
                    afm1_d(gi,2) = 0.d0
                    afm1_d(gi,3) = 0.d0
                    afm1_d(gi,4) = 0.d0
                    afm1_d(gi,5) = -1/detaf
                    afm1_d(gi,6) = 0.d0
                    afm1_d(gi,7) = 0.d0
                    afm1_d(gi,8) = 0.d0
                    afm1_d(gi,9) = -1/detaf
    !
                else
    !
                    afm1_d(gi,1) = 1.d0
                    afm1_d(gi,2) = 0.d0
                    afm1_d(gi,3) = 0.d0
                    afm1_d(gi,4) = 0.d0
                    afm1_d(gi,5) = 1.d0
                    afm1_d(gi,6) = 0.d0
                    afm1_d(gi,7) = 0.d0
                    afm1_d(gi,8) = 0.d0
                    afm1_d(gi,9) = 1.d0
    !
                endif
    !
            endif
!
        endif

    endif
!
! ... fin du traitement ................................................
!
end subroutine source_cudaf
